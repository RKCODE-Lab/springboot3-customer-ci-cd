# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    
jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'oracle'
        cache: maven
    - name: Build with Maven
      working-directory: Curdcicd
      run: mvn -B package --file pom.xml
    - name: Deploy to EC2
      env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
          # Write the SSH key to a file
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Copy the WAR file from backend/target/ to the EC2 instance
          scp -i private_key.pem -o StrictHostKeyChecking=no /home/ubuntu/actions-runner/_work/springboot3-customer-ci-cd/springboot3-customer-ci-cd/Curdcicd/target/Curdcicd.war $EC2_USERNAME@$EC2_HOST:/opt/tomcat/webapps/

          # Optionally restart Tomcat
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "sudo systemctl restart tomcat"

          # Clean up
          rm private_key.pem
